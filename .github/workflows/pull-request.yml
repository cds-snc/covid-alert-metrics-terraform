name: "Pull requests"

on:
  pull_request:
    paths:
      - "aws/**"
      - "env/staging/**"
      - ".github/workflows/*"

env:
  TERRAFORM_VERSION: 0.14.2
  TERRAGRUNT_VERSION: v0.26.0

jobs:
  terraform-plan-staging:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ca-central-1
    strategy:
      fail-fast: false
      matrix:
        include:
          - module_name: ecr
          - module_name: s3
          - module_name: network
          - module_name: etl_lambda

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Setup Terragrunt
        run: |
          mkdir bin
          wget -O bin/terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/$TERRAGRUNT_VERSION/terragrunt_linux_amd64
          chmod +x bin/terragrunt
          echo "bin" >> $GITHUB_PATH

      - name: Validate Module 
        id: validate-module
        run: | 
          cd env/staging/${{ matrix.module_name }}
          ../../../bin/terragrunt validate -no-color
        continue-on-error: false

      - name: Check Formatting
        id: fmt
        run: |
          cd env/staging/${{ matrix.module_name }}
          ../../../bin/terragrunt fmt -check -no-color
        continue-on-error: true

      - name: Plan module
        id: plan
        run: |
          cd env/staging/${{matrix.module_name}}
          OP=$(../../../bin/terragrunt plan --terragrunt-non-interactive | tee /dev/tty)
          echo "::set-output stdout=$OP"
        continue-on-error: true

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style ðŸ–Œ\`${{ steps.fmt.outcome }}\`
            #### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`

            </details>`;


            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Check Success
        if: ${{ steps.fmt.outcome == 'failure' || steps.plan.outcome == 'failure' }}
        run: |
          echo "steps.fmt.outcome == ${{ steps.fmt.outcome }}"
          echo "steps.plan.outcome == ${{ steps.plan.outcome }}"
          exit 1