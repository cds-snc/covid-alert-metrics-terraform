name: "Pull requests"

on:
  pull_request:
    paths:
      - "aws/**"
      - "env/**"
      - ".github/workflows/**"

env:
  SCRIPTS: ./.github/workflows/scripts

jobs:

  tg-plan-dependencies:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ca-central-1
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - module_name: ecr
            environment: staging

          - module_name: ecr
            environment: production

          - module_name: s3
            environment: staging

          - module_name: s3
            environment: production

          - module_name: network
            environment: staging

          - module_name: network
            environment: production

          - module_name: sqs
            environment: staging

          - module_name: sqs
            environment: production

          - module_name: dynamodb
            environment: staging

          - module_name: dynamodb
            environment: production

    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Environment Variables
        run: |
          ${{ env.SCRIPTS }}/setenv.sh TERRAFORM_VERSION >> $GITHUB_ENV
          ${{ env.SCRIPTS }}/setenv.sh TERRAGRUNT_VERSION >> $GITHUB_ENV
          ${{ env.SCRIPTS }}/setenv.sh OPA_VERSION >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Setup Terragrunt and OPA
        run: |
          ${{ env.SCRIPTS }}/setup_tg_opa.sh
          echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH

      - name: Set Prod Version
        if: ${{ matrix.environment == 'production' }}
        run: ${{ env.SCRIPTS }}/get_infra_version.sh >> $GITHUB_ENV

      - name: Validate Module 
        id: validate-module
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets[format('{0}_AWS_ACCESS_KEY_ID',matrix.environment)] }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets[format('{0}_AWS_SECRET_ACCESS_KEY',matrix.environment)] }}
        run: |
          cd env/${{ matrix.environment }}/${{ matrix.module_name }}
          terragrunt validate --terragrunt-non-interactive -no-color
        continue-on-error: false

      - name: Check Formatting
        id: fmt
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets[format('{0}_AWS_ACCESS_KEY_ID',matrix.environment)] }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets[format('{0}_AWS_SECRET_ACCESS_KEY',matrix.environment)] }}
        run: |
          cd env/${{ matrix.environment }}/${{ matrix.module_name }}
          terragrunt fmt --terragrunt-non-interactive -check -no-color
        continue-on-error: true

      - name: Plan module
        id: plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets[format('{0}_AWS_ACCESS_KEY_ID',matrix.environment)] }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets[format('{0}_AWS_SECRET_ACCESS_KEY',matrix.environment)] }}
        run: |
          set -o pipefail
          cd env/${{ matrix.environment }}/${{matrix.module_name}}
          ${{ env.SCRIPTS }}/plan_module.sh
        continue-on-error: true

      - name: Check plan changes
        id: check-changes
        run: |
          ${{ env.SCRIPTS }}/opa_eval.sh no_changes .no_changes
          ${{ env.SCRIPTS }}/opa_eval.sh creates .resource_changes.create
          ${{ env.SCRIPTS }}/opa_eval.sh updates .resource_changes.update
          ${{ env.SCRIPTS }}/opa_eval.sh deletes .resource_changes.delete

      # Create plan comment for PRs if there are changes or the format/plan steps failed
      - uses: actions/github-script@v4
        if: ${{ github.event_name == 'pull_request' && (steps.check-changes.outputs.no-changes != 'true' || steps.fmt.outcome == 'failure' || steps.plan.outcome == 'failure') }}
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const script = require("./.github/scripts/comment_plan.js");
            const s = {
              fmtOutcome: "${{ steps.fmt.outcome }}",
              planOutcome: "${{ steps.plan.outcome}}",
              deletes: "${{ steps.check-changes.outputs.deletes}}",
              creates: "${{ steps.check-changes.outputs.creates}}",
              updates: "${{ steps.check-changes.outputs.updates}}"
            };
            const m = {
              environment: "${{ matrix.environment }}",
              moduleName: "${{ matrix.module_name }}"
            };
            script(github, context, s, m);

      - name: Check Success
        if: ${{ steps.fmt.outcome == 'failure' || steps.plan.outcome == 'failure' }}
        run: |
          echo "steps.fmt.outcome == ${{ steps.fmt.outcome }}"
          echo "steps.plan.outcome == ${{ steps.plan.outcome }}"
          exit 1

  tg-plan-dependents:
    needs: tg-plan-dependencies
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ca-central-1
    strategy:
      fail-fast: false
      matrix:
        include:

          - module_name: etl_lambdas
            environment: staging

          - module_name: etl_lambdas
            environment: production

          - module_name: backoff_retry_lambda
            environment: staging

          - module_name: backoff_retry_lambda
            environment: production

    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Environment Variables
        run: |
          ${{ env.SCRIPTS }}/setenv.sh TERRAFORM_VERSION >> $GITHUB_ENV
          ${{ env.SCRIPTS }}/setenv.sh TERRAGRUNT_VERSION >> $GITHUB_ENV
          ${{ env.SCRIPTS }}/setenv.sh OPA_VERSION >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Setup Terragrunt and OPA
        run: |
          ${{ env.SCRIPTS }}/setup_tg_opa.sh
          echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH
      
      - name: Set Prod Version
        if: ${{ matrix.environment == 'production' }}
        run: |
          INFRASTRUCTURE_VERSION=`cat ./.github/workflows/manifest/prod_version.txt`
          echo "INFRASTRUCTURE_VERSION=$INFRASTRUCTURE_VERSION" >> $GITHUB_ENV

      - name: Validate Module 
        id: validate-module
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets[format('{0}_AWS_ACCESS_KEY_ID',matrix.environment)] }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets[format('{0}_AWS_SECRET_ACCESS_KEY',matrix.environment)] }}
        run: |
          cd env/${{ matrix.environment }}/${{ matrix.module_name }}
          terragrunt validate --terragrunt-non-interactive -no-color
        continue-on-error: false

      - name: Check Formatting
        id: fmt
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets[format('{0}_AWS_ACCESS_KEY_ID',matrix.environment)] }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets[format('{0}_AWS_SECRET_ACCESS_KEY',matrix.environment)] }}
        run: |
          cd env/${{ matrix.environment }}/${{ matrix.module_name }}
          terragrunt fmt --terragrunt-non-interactive -check -no-color
        continue-on-error: true

      - name: Plan module
        id: plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets[format('{0}_AWS_ACCESS_KEY_ID',matrix.environment)] }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets[format('{0}_AWS_SECRET_ACCESS_KEY',matrix.environment)] }}
        run: |
          set -o pipefail
          cd env/${{ matrix.environment }}/${{matrix.module_name}}
          ${{ env.SCRIPTS }}/plan_module.sh
        continue-on-error: true

      - name: Check plan changes
        id: check-changes
        run: |
          ${{ env.SCRIPTS }}/opa_eval.sh no_changes .no_changes
          ${{ env.SCRIPTS }}/opa_eval.sh creates .resource_changes.create
          ${{ env.SCRIPTS }}/opa_eval.sh updates .resource_changes.update
          ${{ env.SCRIPTS }}/opa_eval.sh deletes .resource_changes.delete

      # Create plan comment for PRs if there are changes or the format/plan steps failed
      - uses: actions/github-script@v4
        if: ${{ github.event_name == 'pull_request' && (steps.check-changes.outputs.no-changes != 'true' || steps.fmt.outcome == 'failure' || steps.plan.outcome == 'failure') }}
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const script = require("./.github/scripts/comment_plan.js");
            const s = {
              fmtOutcome: "${{ steps.fmt.outcome }}",
              planOutcome: "${{ steps.plan.outcome}}",
              deletes: "${{ steps.check-changes.outputs.deletes}}",
              creates: "${{ steps.check-changes.outputs.creates}}",
              updates: "${{ steps.check-changes.outputs.updates}}"
            };
            const m = {
              environment: "${{ matrix.environment }}",
              moduleName: "${{ matrix.module_name }}"
            };
            script(github, context, s, m);

      - name: Check Success
        if: ${{ steps.fmt.outcome == 'failure' || steps.plan.outcome == 'failure' }}
        run: |
          echo "steps.fmt.outcome == ${{ steps.fmt.outcome }}"
          echo "steps.plan.outcome == ${{ steps.plan.outcome }}"
          exit 1

  comment-end:
    if: always()
    needs: [tg-plan-dependents]
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/github-script@v4
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            require("./.github/scripts/comment_end.js")(github, context);